import java.io.File;
import java.io.FileNotFoundException;
import java.util.Comparator;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

/*@Author Derek Nightingale
 * CPS 240 HW3
 * Created: 27Sept2015
 * Last Modified: 30Sept2015
 * 
 * This program takes in a book sized txt file then finds the 20 most and least frequent words
 */

public class WordFreqCount{ 
	
	public static void main(String[] args) throws FileNotFoundException {
		Scanner input = new Scanner(System.in);
		System.out.println("Enter file name stored in the program path: ");
		String usrInput = input.next();
		input.close();
		
		File file = new File(usrInput);
		Scanner scan = new Scanner(file);
		Map<String, Integer> treeMap = new TreeMap<String, Integer>();
		String word = "";
		
		while(scan.hasNext()) {
			
			word = scan.next().replaceAll("[^a-zA-Z ]", "").toLowerCase();
			if (treeMap.containsKey(word)) {
				treeMap.put(word, treeMap.get(word)+1);
			}
			else {
				treeMap.put(word, 1);
			}
		}
		scan.close();

		Map<String, Integer> sortedMap = sortByValues(treeMap);
		System.out.println("20 Most Used Words: ");
		for(int  i = 0; i < 21; i++) {
			System.out.print("("+i+"): " );
			System.out.println(((TreeMap<String, Integer>) sortedMap).pollFirstEntry());
		}
		
		System.out.println("\n20 Least Used Words: ");
		for(int j = 0; j<21; j++){
			System.out.print("("+j+"): " );
			System.out.println(((TreeMap<String, Integer>) sortedMap).pollLastEntry());
		}

	}
	
	public static <K, V extends Comparable<V>> Map<K, V> sortByValues(final Map<K, V> map) {
	    Comparator<K> valueComparator =  new Comparator<K>() {
	        public int compare(K k1, K k2) {
	            int compare = map.get(k2).compareTo(map.get(k1));
	            if (compare == 0) return 1;
	            else return compare;
	        }
	    };
	    Map<K, V> sortedByValues = new TreeMap<K, V>(valueComparator);
	    sortedByValues.putAll(map);
	    return sortedByValues;
	}
}
